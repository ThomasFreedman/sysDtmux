# Endpoint for P2P node to listen on
#p2p-endpoint = 0.0.0.0:<PORT NUM - REQUIRED>

# P2P nodes to connect to on startup (may specify multiple times)
#seed-node = SEED_IP-DOMAIN-SPEC

# Pairs of [BLOCK_NUM,BLOCK_ID] that should be enforced as checkpoints.
# checkpoint = 

# Endpoint for websocket RPC to listen on
#rpc-endpoint = 127.0.0.1:<PORT NUM - REQUIRED (local only; change for public API>

# Endpoint for TLS websocket RPC to listen on
# rpc-tls-endpoint =

# The TLS certificate file for this server
# server-pem =

# Password for this certificate                                              
# server-pem-password =

# File to read Genesis State from
#genesis-json = 

# JSON file specifying API permissions
#api-access = api_access json file - REQUIRED FOR bts_tools 

# Enable block production, even if the chain is stale.
#enable-stale-production = true

# Percent of witnesses (0-99) that must be participating in order to produce blocks
required-participation = false

# Allow block production, even if the last block was produced by the same witness.
#allow-consecutive = false

# ID of witness controlled by this node (e.g. "1.6.0", quotes are required, may specify multiple times)
#witness-id = "1.6.X" REPLACE WITH YOUR WITNESS ID - REQUIRED

# Tuple of [PublicKey, WIF private key] (may specify multiple times)
#private-key = [ "BTS...", "5..." ] YOUR SIGNING KEY - REQUIRED

# Account ID to track history for (may NOT specify multiple times -- must use cmd line to do that)
# 1.2.126782==bittwenty.feed, 1.2.1==witness.account that contains all active witnesses
# For public API nodes you should not use track account to limit history, however public API
# nodes require far more RAM to operate.
track-account = "1.2.1"
#track-account = "1.2.126782"

# In conjunction with track-account this enables RAM use for operations on tracked accounts only
partial-operations = true

# Track market history by grouping orders into buckets of equal size measured in seconds specified as a JSON array of numbers
bucket-size = [60,86400]

# How far back in time to track history for each bucket size, measured in the number of buckets (default: 1000)
history-per-size = 100

# declare an appender named "stderr" that writes messages to the console
#[log.console_appender.stderr]
#stream=std_error

# Instead of console this will will route all output (after the node gets synced) to a file.
# NOTE: Relative paths will work UNLESS they include a hidden folder. Safest to use absolute 
#       path to location the user account has permissions to access. 
[log.file_appender.stderr]
filename=/home/ACCOUNT/PATH TO/YOUR/LOGS/FOLDER/witness.log

# declare an appender named "p2p" that writes messages to p2p.log
[log.file_appender.p2p]
filename=/home/ACCOUNT/PATH TO/YOUR/LOGS/FOLDER/p2p/p2p.log

# route any messages logged to the default logger to the "stderr" logger we
# declared above, if they are info level are higher
[logger.default]
level=info
appenders=stderr

# route messages sent to the "p2p" logger to the p2p appender declared above
[logger.p2p]
level=debug
appenders=p2p

